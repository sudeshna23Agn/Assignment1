/**
 ******************************************************************************
 * @file           : fault_handling.h
 * @project        : Agnikul Generic Software Library
 * @brief          : Header file containing prototypes relevant to error handling.
 * @author         : Shawn N, Dheeraj R
 * @version        : v2.1
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) Agnikul Cosmos Private Limited
 * All rights reserved.</center></h2>
 *
 ******************************************************************************
 */

#ifndef ERROR_H_
#define ERROR_H_

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/*******************************************************************************
 * Preprocessor definitions
 ******************************************************************************/

#define PROC_NAME_SIZE	20	/**<Max size of process name*/

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvariadic-macros"	/**<Disabling Warning for
variadic macros for this section of code*/

/**
 * @brief 	MACRO to handle the system call errors.
 * @details 3 levels of error handling implemented
 * a. All errors are Fatal errors with verbose statements
 * b. All errors are non-Fatal with verbose statements
 * c. All errors are non-fatal with summary of statements
 * @ref - Hands on system programming on Linux-
 *             Kaiwan Billimoria book.
 * */

#ifdef ERR_FATAL
#define PRINT_ERR(errmsg, args...) do {										\
		handle_err(EXIT_FAILURE, "Fatal Error: %s: %s: %s:%d: " errmsg,    	\
		g_proc_id.proc_name, __FILE__, __func__, __LINE__, ##args);			\
} while(0)

#elif ERR_PRINT_V
#define PRINT_ERR(errmsg, args...) do {										\
		handle_err(EXIT_FAILURE, "Error: %s: %s: %s:%d: " errmsg,  			\
				g_proc_id.proc_name, __FILE__, __func__, __LINE__, ##args);	\
}while(0)

#elif ERR_PRINT_S
#define PRINT_ERR(errmsg, args...) do {								\
		handle_err(EXIT_FAILURE, "%s: %s:%d:",    					\
				g_proc_id.proc_name, __func__, __LINE__, ##args);	\
}while(0)

#endif

#pragma GCC diagnostic pop

/*******************************************************************************
 * Structures / Enums
 ******************************************************************************/

/**
 * @brief Used to return status of functions
 */
typedef enum{
	FAILURE = -1,/**< FAILURE */
	SUCCESS = 1, /**< SUCCESS */
}FUNC_STATUS;

/**
 * @brief Struct to store the process name and ID
 * */
typedef struct{
	char proc_name[PROC_NAME_SIZE];
	pid_t pid;
}proc_info;

extern proc_info g_proc_id;	/**<Used across project to store proc info*/

/*******************************************************************************
 * Function Prototypes
 ******************************************************************************/
/**
 * @brief    Handles errors generated by system calls. Used in the PRINT_ERR macro.
 * @param    int - Error number
 * @param    const char* - string format    This is the same formatting used by stdlib
 * @return   int - 0 on success, -1 on failure
 *
 * */
int handle_err(int err_no, const char *fmt, ...);

#endif /* COMMON_H_ */
